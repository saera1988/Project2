{"version":3,"sources":["Navigation.js","Home.js","WaterDrink.js","WaterCups.js","Water.js","Fitness.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Home","WaterDrink","onSubmit","this","props","addCup","placeholder","ref","inputElement","value","currentAmount","onChange","handleInput","onClick","clearList","Component","WaterCups","cupIntak","data","map","item","i","key","deleteCup","Date","toTimeString","Water","e","target","setState","preventDefault","newCup","state","console","log","cups","indexOfCup","indexOf","splice","join","max","Fitness","weather","main","icons","Clear","Rain","Storm","Snow","Mist","Clouds","axios","get","then","res","temp","toFixed","catch","err","message","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff4df190.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom'\n// import { createBrowserHistory } from \"history\";\n\nconst Navigation = () => {\n//   const history = createBrowserHistory();\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n      <a className=\"navbar-brand\" href=\"./Home\">\n        Fit Life\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarsExampleDefault\"\n        aria-controls=\"navbarsExampleDefault\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n        <ul className=\"navbar-nav mr-auto\">\n      \n\n          <li className=\"nav-item active\">\n            <Link className=\"nav-link\" to={\"/\"}>\n              Home\n            </Link>\n          </li>\n         \n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to={\"/fitness\"}>\n              Fitness\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to={\"/water\"}>\n              Water Intake\n            </Link>\n          </li>\n        </ul>\n       \n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;\n\n// Bootstrap navigational bar which displays the name of the app,\n//  menu link, and Sign In/Sign Out links. We’ll be rendering the Menu\n//  link and Sign In/Out buttons conditionally, depending on the user’s status in a later section. But for now,\n// let’s leave the navbar like this.\n","import React from \"react\";\n\nconst Home = () => {\n  return (\n    <div className=\"Home\">\n      <h1>Welcome to Fit Life !</h1>\n      <br />\n      <h3 className=\"lead\">\n        Fit Life is all about wellness\n        <br />\n        and healthyliving.\n        <br /> <br />\n        The first step to a healthier you<br/> takes less than a minute ...\n      </h3><br/>\n      <ul>\n          <li>Track your daily water intake .</li>\n          <li>Suggest physical activity mood according <br/>to the Weather.</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n\n// Home page here is simple stateless functional component that simply displays\n//   greeting message.\n","//this is the component that will displaed on the tab of water\nimport React, { Component } from \"react\";\n\nclass WaterDrink extends Component {\n\n  \n   render() {\n    return (\n      <div className=\"WaterDrinkMain\">\n        <div className=\"header\">\n          <h1 className=\"StayHidrated\">Stay Hydrated</h1>\n          \n\n          {/* user will inter numbers of cup in this form which will call the function addcup */}\n          <form onSubmit={this.props.addCup}>\n            <input\n            // info about input entered by the user\n              type=\"number\"\n              placeholder=\"Water Intake\"\n              ref={this.props.inputElement}\n              value={this.props.currentAmount}\n              onChange={this.props.handleInput}\n            />\n         \n            {/* add button add to the list*/}\n            <button type=\"submit\" className=\"Add\">\n              {\" \"}\n              Add Cups{\" \"}\n            </button>\n          </form>\n           {/* clear button ,clear whole list*/}\n          <button onClick={this.props.clearList} className=\"Clear\">\n            Clear List!\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default WaterDrink;\n","import React, { Component } from \"react\";\n// const Arr =[];\nclass WaterCups extends Component {\n  render() {\n    // etration throught the array of cups\n    const cupIntak = this.props.data.map((item, i) => {\n      return (\n        //display input which is array in list\n        <ul key={i}>\n          <span id=\"listedCups\">{item} Cups </span>\n          {/* icon used as button to delet some items in list  */}\n          {/* delet one item or modify the list  */}\n          <button\n            onClick={() => this.props.deleteCup(item)}\n            className=\"material-icons\"\n          >\n            format_color_reset\n          </button>\n          {/* display time and date  */}\n          <span className=\"Date\">{new Date().toTimeString()}</span>\n        </ul>\n      );\n    });\n    //display input which is array in list\n    return <ul className=\"theCups\">{cupIntak}</ul>;\n  }\n}\nexport default WaterCups;\n","// Water represent the main (parent)page\nimport React, { Component } from \"react\";\nimport WaterDrink from \"./WaterDrink\";\nimport \"./index.css\";\nimport WaterCups from \"./WaterCups\";\n\nclass Water extends Component {\n  constructor() {\n    super();\n    // state to hold the array of cups to render elements \n    this.state = {\n      cups: [],\n      // another state to hold the current value\n      currentAmount:  \"\" , \n    };\n  }\n\n  // change in the input field.\n  handleInput = e => {\n    const cupInput = e.target.value;\n    const currentAmount = cupInput;\n    this.setState({\n      currentAmount: currentAmount\n    });\n  };\n\n  // add cups \n  addCup = (e) => {\n    // prevent reloading from submitting the form\n    e.preventDefault();\n    \n    const newCup = this.state.currentAmount;\n    console.log(\"state \" + newCup);\n    if(!newCup || newCup < 1) {\n      this.setState({\n        cups: [...this.state.cups],\n        currentAmount: \"\"\n      \n      });\n    } else {\n      console.log(newCup);\n      // const items = [this.state.items, newCup];\n      this.setState({\n        cups: [...this.state.cups, newCup],\n        currentAmount: newCup\n      \n      });\n    }\n   \n  };\n\n  // clear the whole list \n  clearList = () => {\n    this.setState({\n      cups: []\n    });\n  }\n\n  // to modify and delet some items from the list \n  deleteCup = item => {\n    const cups= [...this.state.cups]; //copy from cups array\n    const indexOfCup= cups.indexOf(item); //find the index of the 2nd cpoy \n    cups.splice(indexOfCup, 1);\n    this.setState({cups});\n  };\n  \n  render() {\n    return (\n      <div className=\"Water\">\n      <progress value={this.state.cups.join(\"+\")} max=\"8\"></progress>\n        <WaterDrink\n          addCup={this.addCup}\n          handleInput={this.handleInput}\n          currentAmount={this.state.currentAmount}\n          clearList={this.clearList}\n\n        />\n      <div>\n        <WaterCups \n         data={this.state.cups} deleteCup={this.deleteCup}/>\n      </div>\n      </div>\n    );\n  }\n}\nexport default Water;\n","//this page will use api weather to display the weather and \n//tell the user to do indoor or outdoor workout \n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\n\nclass Fitness extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: 0,\n      main:\"\",\n       icons : {\n        Clear: '☀',\n        Rain: '️🌧',\n        Storm: '⛈',\n        Snow: '🌨',\n        Mist: '🌫',\n        Clouds: '☁',\n      }\n \n    };\n  }\n\n  componentDidMount() {\n    axios\n    // Make a request for a user with a given ID\n      .get(\n        \"http://api.openweathermap.org/data/2.5/weather?q=Riyadh&APPID=7efda5368aeb93263e50677873e5cdfc\"\n      )\n      //response \n      .then(res => {\n           // handle success\n           console.log(res.data);\n           \n           let weather = (res.data.main.temp-273.15).toFixed(2)\n        this.setState({\n            weather : weather,\n            main: res.data.weather[0].main,\n            // pre:res.data.main.pressure\n        })\n        console.log(res.data.main.temp-273.15)\n      })\n\n      .catch(err => {\n            // handle error\n        console.log(err);\n      });\n  }\n  render() {\n    // varible to store the message to desply later\n    console.log(this.state.icons[this.state.main]);\n    \n    let message ;\n  \n    // check with workout suit the weather condtion with if \n    if(this.state.weather < 18){\n      message = \" Indoor Workout \"\n    \n    } else if( 30 <this.state.weather){\n      message = \" Outdoor Workout \"\n    }else if( 18< this.state.weather <30){\n      message = \"Outdoor Workout\"\n    }\n    return <div >\n      <h1 className=\"FitnessHead\"> Staying Active No<br/>Matter\nWhat Mother <br/>Nature Dishes Out..</h1>\n      {/* // data from api will desplay here  */}\n      <br/>\n      <h2 className=\"Weather\">  The Weather Today <br/> {this.state.weather} °C {this.state.icons[this.state.main]}</h2>\n      <br/>\n    <h4 className=\"Message\">  Enjoy your {message}</h4>\n \n    </div>;\n  }\n}\nexport default Fitness;\n","import React, { Component } from \"react\";\n\nimport Navigation from \"./Navigation\";\nimport Home from \"./Home\";\nimport Water from \"./Water\";\nimport Fitness from \"./Fitness\";\nimport { BrowserRouter, Route,HashRouter } from \"react-router-dom\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      // BrowserRouter to enable routing within the application\n      <HashRouter basename=\"/\">\n        <Navigation />\n        <Route exact path=\"/\" component={Home} />\n        {/* <Route path=\"/NetFact\" component={NetFact} /> */}\n        <Route path=\"/water\" component={Water} />\n        <Route path=\"/fitness\" component={Fitness} />\n    \n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}